/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface SherDistributionManagerInterface extends utils.Interface {
  contractName: "SherDistributionManager"
  functions: {
    "calcReward(uint256,uint256,uint256)": FunctionFragment
    "isActive()": FunctionFragment
    "owner()": FunctionFragment
    "pause()": FunctionFragment
    "paused()": FunctionFragment
    "pullReward(uint256,uint256,uint256,address)": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "setSherlockCoreAddress(address)": FunctionFragment
    "sher()": FunctionFragment
    "sweep(address,address[])": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "unpause()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "calcReward", values: [BigNumberish, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "pause", values?: undefined): string
  encodeFunctionData(functionFragment: "paused", values?: undefined): string
  encodeFunctionData(functionFragment: "pullReward", values: [BigNumberish, BigNumberish, BigNumberish, string]): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "setSherlockCoreAddress", values: [string]): string
  encodeFunctionData(functionFragment: "sher", values?: undefined): string
  encodeFunctionData(functionFragment: "sweep", values: [string, string[]]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string

  decodeFunctionResult(functionFragment: "calcReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pullReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setSherlockCoreAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sher", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result

  events: {
    "Initialized(uint256,uint256,uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "Paused(address)": EventFragment
    "SherlockCoreSet(address)": EventFragment
    "Unpaused(address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment
  getEvent(nameOrSignatureOrTopic: "SherlockCoreSet"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment
}

export type InitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    maxRewardsEndTVL: BigNumber
    zeroRewardsStartTVL: BigNumber
    maxRewardRate: BigNumber
  }
>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type PausedEvent = TypedEvent<[string], { account: string }>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type SherlockCoreSetEvent = TypedEvent<[string], { sherlock: string }>

export type SherlockCoreSetEventFilter = TypedEventFilter<SherlockCoreSetEvent>

export type UnpausedEvent = TypedEvent<[string], { account: string }>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface SherDistributionManager extends BaseContract {
  contractName: "SherDistributionManager"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SherDistributionManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    calcReward(
      _tvl: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _sher: BigNumber }>

    isActive(overrides?: CallOverrides): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    pullReward(
      _amount: BigNumberish,
      _period: BigNumberish,
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sher(overrides?: CallOverrides): Promise<[string]>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>
  }

  calcReward(
    _tvl: BigNumberish,
    _amount: BigNumberish,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  isActive(overrides?: CallOverrides): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  pullReward(
    _amount: BigNumberish,
    _period: BigNumberish,
    _id: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setSherlockCoreAddress(
    _sherlock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sher(overrides?: CallOverrides): Promise<string>

  sweep(
    _receiver: string,
    _extraTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  callStatic: {
    calcReward(
      _tvl: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isActive(overrides?: CallOverrides): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    pullReward(
      _amount: BigNumberish,
      _period: BigNumberish,
      _id: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setSherlockCoreAddress(_sherlock: string, overrides?: CallOverrides): Promise<void>

    sher(overrides?: CallOverrides): Promise<string>

    sweep(_receiver: string, _extraTokens: string[], overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "Initialized(uint256,uint256,uint256)"(
      maxRewardsEndTVL?: null,
      zeroRewardsStartTVL?: null,
      maxRewardRate?: null
    ): InitializedEventFilter
    Initialized(maxRewardsEndTVL?: null, zeroRewardsStartTVL?: null, maxRewardRate?: null): InitializedEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    "Paused(address)"(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    "SherlockCoreSet(address)"(sherlock?: null): SherlockCoreSetEventFilter
    SherlockCoreSet(sherlock?: null): SherlockCoreSetEventFilter

    "Unpaused(address)"(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    calcReward(
      _tvl: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isActive(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    pullReward(
      _amount: BigNumberish,
      _period: BigNumberish,
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sher(overrides?: CallOverrides): Promise<BigNumber>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    calcReward(
      _tvl: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pullReward(
      _amount: BigNumberish,
      _period: BigNumberish,
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sher(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>
  }
}
