/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface SherBuyInterface extends utils.Interface {
  contractName: "SherBuy"
  functions: {
    "PERIOD()": FunctionFragment
    "active()": FunctionFragment
    "buyRate()": FunctionFragment
    "execute(uint256)": FunctionFragment
    "receiver()": FunctionFragment
    "sher()": FunctionFragment
    "sherClaim()": FunctionFragment
    "sherlockPosition()": FunctionFragment
    "stakeRate()": FunctionFragment
    "sweepTokens(address[])": FunctionFragment
    "usdc()": FunctionFragment
    "viewCapitalRequirements(uint256)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string
  encodeFunctionData(functionFragment: "active", values?: undefined): string
  encodeFunctionData(functionFragment: "buyRate", values?: undefined): string
  encodeFunctionData(functionFragment: "execute", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string
  encodeFunctionData(functionFragment: "sher", values?: undefined): string
  encodeFunctionData(functionFragment: "sherClaim", values?: undefined): string
  encodeFunctionData(functionFragment: "sherlockPosition", values?: undefined): string
  encodeFunctionData(functionFragment: "stakeRate", values?: undefined): string
  encodeFunctionData(functionFragment: "sweepTokens", values: [string[]]): string
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string
  encodeFunctionData(functionFragment: "viewCapitalRequirements", values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "buyRate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sher", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherClaim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherlockPosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "stakeRate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sweepTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "viewCapitalRequirements", data: BytesLike): Result

  events: {
    "Purchase(address,uint256,uint256,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment
}

export type PurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { buyer: string; amount: BigNumber; staked: BigNumber; paid: BigNumber }
>

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>

export interface SherBuy extends BaseContract {
  contractName: "SherBuy"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SherBuyInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>

    active(overrides?: CallOverrides): Promise<[boolean]>

    buyRate(overrides?: CallOverrides): Promise<[BigNumber]>

    execute(
      _sherAmountWant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    receiver(overrides?: CallOverrides): Promise<[string]>

    sher(overrides?: CallOverrides): Promise<[string]>

    sherClaim(overrides?: CallOverrides): Promise<[string]>

    sherlockPosition(overrides?: CallOverrides): Promise<[string]>

    stakeRate(overrides?: CallOverrides): Promise<[BigNumber]>

    sweepTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    usdc(overrides?: CallOverrides): Promise<[string]>

    viewCapitalRequirements(
      _sherAmountWant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sherAmount: BigNumber
        stake: BigNumber
        price: BigNumber
      }
    >
  }

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>

  active(overrides?: CallOverrides): Promise<boolean>

  buyRate(overrides?: CallOverrides): Promise<BigNumber>

  execute(
    _sherAmountWant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  receiver(overrides?: CallOverrides): Promise<string>

  sher(overrides?: CallOverrides): Promise<string>

  sherClaim(overrides?: CallOverrides): Promise<string>

  sherlockPosition(overrides?: CallOverrides): Promise<string>

  stakeRate(overrides?: CallOverrides): Promise<BigNumber>

  sweepTokens(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  usdc(overrides?: CallOverrides): Promise<string>

  viewCapitalRequirements(
    _sherAmountWant: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      sherAmount: BigNumber
      stake: BigNumber
      price: BigNumber
    }
  >

  callStatic: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    active(overrides?: CallOverrides): Promise<boolean>

    buyRate(overrides?: CallOverrides): Promise<BigNumber>

    execute(_sherAmountWant: BigNumberish, overrides?: CallOverrides): Promise<void>

    receiver(overrides?: CallOverrides): Promise<string>

    sher(overrides?: CallOverrides): Promise<string>

    sherClaim(overrides?: CallOverrides): Promise<string>

    sherlockPosition(overrides?: CallOverrides): Promise<string>

    stakeRate(overrides?: CallOverrides): Promise<BigNumber>

    sweepTokens(_tokens: string[], overrides?: CallOverrides): Promise<void>

    usdc(overrides?: CallOverrides): Promise<string>

    viewCapitalRequirements(
      _sherAmountWant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sherAmount: BigNumber
        stake: BigNumber
        price: BigNumber
      }
    >
  }

  filters: {
    "Purchase(address,uint256,uint256,uint256)"(
      buyer?: string | null,
      amount?: null,
      staked?: null,
      paid?: null
    ): PurchaseEventFilter
    Purchase(buyer?: string | null, amount?: null, staked?: null, paid?: null): PurchaseEventFilter
  }

  estimateGas: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    active(overrides?: CallOverrides): Promise<BigNumber>

    buyRate(overrides?: CallOverrides): Promise<BigNumber>

    execute(
      _sherAmountWant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    receiver(overrides?: CallOverrides): Promise<BigNumber>

    sher(overrides?: CallOverrides): Promise<BigNumber>

    sherClaim(overrides?: CallOverrides): Promise<BigNumber>

    sherlockPosition(overrides?: CallOverrides): Promise<BigNumber>

    stakeRate(overrides?: CallOverrides): Promise<BigNumber>

    sweepTokens(_tokens: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    usdc(overrides?: CallOverrides): Promise<BigNumber>

    viewCapitalRequirements(_sherAmountWant: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    execute(
      _sherAmountWant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sher(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherlockPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sweepTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    viewCapitalRequirements(_sherAmountWant: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
