/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface SherlockInterface extends utils.Interface {
  contractName: "Sherlock"
  functions: {
    "ARB_RESTAKE_GROWTH_TIME()": FunctionFragment
    "ARB_RESTAKE_MAX_PERCENTAGE()": FunctionFragment
    "ARB_RESTAKE_PERIOD()": FunctionFragment
    "ARB_RESTAKE_WAIT_TIME()": FunctionFragment
    "approve(address,uint256)": FunctionFragment
    "arbRestake(uint256)": FunctionFragment
    "balanceOf(address)": FunctionFragment
    "disableStakingPeriod(uint256)": FunctionFragment
    "enableStakingPeriod(uint256)": FunctionFragment
    "getApproved(uint256)": FunctionFragment
    "initialStake(uint256,uint256,address)": FunctionFragment
    "isApprovedForAll(address,address)": FunctionFragment
    "lockupEnd(uint256)": FunctionFragment
    "name()": FunctionFragment
    "nonStakersAddress()": FunctionFragment
    "owner()": FunctionFragment
    "ownerOf(uint256)": FunctionFragment
    "ownerRestake(uint256,uint256)": FunctionFragment
    "pause()": FunctionFragment
    "paused()": FunctionFragment
    "payoutClaim(address,uint256)": FunctionFragment
    "redeemNFT(uint256)": FunctionFragment
    "removeSherDistributionManager()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "safeTransferFrom(address,address,uint256)": FunctionFragment
    "setApprovalForAll(address,bool)": FunctionFragment
    "sher()": FunctionFragment
    "sherDistributionManager()": FunctionFragment
    "sherRewards(uint256)": FunctionFragment
    "sherlockClaimManager()": FunctionFragment
    "sherlockProtocolManager()": FunctionFragment
    "stakingPeriods(uint256)": FunctionFragment
    "supportsInterface(bytes4)": FunctionFragment
    "symbol()": FunctionFragment
    "token()": FunctionFragment
    "tokenBalanceOf(uint256)": FunctionFragment
    "tokenBalanceOfAddress(address)": FunctionFragment
    "tokenURI(uint256)": FunctionFragment
    "totalTokenBalanceStakers()": FunctionFragment
    "transferFrom(address,address,uint256)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "unpause()": FunctionFragment
    "updateNonStakersAddress(address)": FunctionFragment
    "updateSherDistributionManager(address)": FunctionFragment
    "updateSherlockClaimManager(address)": FunctionFragment
    "updateSherlockProtocolManager(address)": FunctionFragment
    "updateYieldStrategy(address)": FunctionFragment
    "viewRewardForArbRestake(uint256)": FunctionFragment
    "yieldStrategy()": FunctionFragment
    "yieldStrategyDeposit(uint256)": FunctionFragment
    "yieldStrategyWithdraw(uint256)": FunctionFragment
    "yieldStrategyWithdrawAll()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "ARB_RESTAKE_GROWTH_TIME", values?: undefined): string
  encodeFunctionData(functionFragment: "ARB_RESTAKE_MAX_PERCENTAGE", values?: undefined): string
  encodeFunctionData(functionFragment: "ARB_RESTAKE_PERIOD", values?: undefined): string
  encodeFunctionData(functionFragment: "ARB_RESTAKE_WAIT_TIME", values?: undefined): string
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "arbRestake", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string
  encodeFunctionData(functionFragment: "disableStakingPeriod", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "enableStakingPeriod", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "getApproved", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "initialStake", values: [BigNumberish, BigNumberish, string]): string
  encodeFunctionData(functionFragment: "isApprovedForAll", values: [string, string]): string
  encodeFunctionData(functionFragment: "lockupEnd", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "name", values?: undefined): string
  encodeFunctionData(functionFragment: "nonStakersAddress", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "ownerOf", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "ownerRestake", values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: "pause", values?: undefined): string
  encodeFunctionData(functionFragment: "paused", values?: undefined): string
  encodeFunctionData(functionFragment: "payoutClaim", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "redeemNFT", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "removeSherDistributionManager", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "safeTransferFrom", values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: "setApprovalForAll", values: [string, boolean]): string
  encodeFunctionData(functionFragment: "sher", values?: undefined): string
  encodeFunctionData(functionFragment: "sherDistributionManager", values?: undefined): string
  encodeFunctionData(functionFragment: "sherRewards", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "sherlockClaimManager", values?: undefined): string
  encodeFunctionData(functionFragment: "sherlockProtocolManager", values?: undefined): string
  encodeFunctionData(functionFragment: "stakingPeriods", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string
  encodeFunctionData(functionFragment: "token", values?: undefined): string
  encodeFunctionData(functionFragment: "tokenBalanceOf", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "tokenBalanceOfAddress", values: [string]): string
  encodeFunctionData(functionFragment: "tokenURI", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "totalTokenBalanceStakers", values?: undefined): string
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string
  encodeFunctionData(functionFragment: "updateNonStakersAddress", values: [string]): string
  encodeFunctionData(functionFragment: "updateSherDistributionManager", values: [string]): string
  encodeFunctionData(functionFragment: "updateSherlockClaimManager", values: [string]): string
  encodeFunctionData(functionFragment: "updateSherlockProtocolManager", values: [string]): string
  encodeFunctionData(functionFragment: "updateYieldStrategy", values: [string]): string
  encodeFunctionData(functionFragment: "viewRewardForArbRestake", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "yieldStrategy", values?: undefined): string
  encodeFunctionData(functionFragment: "yieldStrategyDeposit", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "yieldStrategyWithdraw", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "yieldStrategyWithdrawAll", values?: undefined): string

  decodeFunctionResult(functionFragment: "ARB_RESTAKE_GROWTH_TIME", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ARB_RESTAKE_MAX_PERCENTAGE", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ARB_RESTAKE_PERIOD", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ARB_RESTAKE_WAIT_TIME", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "arbRestake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "disableStakingPeriod", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "enableStakingPeriod", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialStake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "lockupEnd", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nonStakersAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ownerRestake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "payoutClaim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "redeemNFT", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "removeSherDistributionManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "safeTransferFrom", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sher", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherDistributionManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherRewards", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherlockClaimManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sherlockProtocolManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "stakingPeriods", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenBalanceOf", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenBalanceOfAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokenBalanceStakers", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateNonStakersAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateSherDistributionManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateSherlockClaimManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateSherlockProtocolManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateYieldStrategy", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "viewRewardForArbRestake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "yieldStrategy", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "yieldStrategyDeposit", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "yieldStrategyWithdraw", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "yieldStrategyWithdrawAll", data: BytesLike): Result

  events: {
    "Approval(address,address,uint256)": EventFragment
    "ApprovalForAll(address,address,bool)": EventFragment
    "ArbRestaked(uint256,uint256)": EventFragment
    "ClaimManagerUpdated(address,address)": EventFragment
    "ClaimPayout(address,uint256)": EventFragment
    "NonStakerAddressUpdated(address,address)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "Paused(address)": EventFragment
    "ProtocolManagerUpdated(address,address)": EventFragment
    "Restaked(uint256)": EventFragment
    "SherDistributionManagerUpdated(address,address)": EventFragment
    "StakingPeriodDisabled(uint256)": EventFragment
    "StakingPeriodEnabled(uint256)": EventFragment
    "Transfer(address,address,uint256)": EventFragment
    "Unpaused(address)": EventFragment
    "YieldStrategyUpdateWithdrawAllError(bytes)": EventFragment
    "YieldStrategyUpdated(address,address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ArbRestaked"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ClaimManagerUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ClaimPayout"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NonStakerAddressUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolManagerUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Restaked"): EventFragment
  getEvent(nameOrSignatureOrTopic: "SherDistributionManagerUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "StakingPeriodDisabled"): EventFragment
  getEvent(nameOrSignatureOrTopic: "StakingPeriodEnabled"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment
  getEvent(nameOrSignatureOrTopic: "YieldStrategyUpdateWithdrawAllError"): EventFragment
  getEvent(nameOrSignatureOrTopic: "YieldStrategyUpdated"): EventFragment
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export type ArbRestakedEvent = TypedEvent<[BigNumber, BigNumber], { tokenID: BigNumber; reward: BigNumber }>

export type ArbRestakedEventFilter = TypedEventFilter<ArbRestakedEvent>

export type ClaimManagerUpdatedEvent = TypedEvent<[string, string], { previous: string; current: string }>

export type ClaimManagerUpdatedEventFilter = TypedEventFilter<ClaimManagerUpdatedEvent>

export type ClaimPayoutEvent = TypedEvent<[string, BigNumber], { receiver: string; amount: BigNumber }>

export type ClaimPayoutEventFilter = TypedEventFilter<ClaimPayoutEvent>

export type NonStakerAddressUpdatedEvent = TypedEvent<[string, string], { previous: string; current: string }>

export type NonStakerAddressUpdatedEventFilter = TypedEventFilter<NonStakerAddressUpdatedEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type PausedEvent = TypedEvent<[string], { account: string }>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type ProtocolManagerUpdatedEvent = TypedEvent<[string, string], { previous: string; current: string }>

export type ProtocolManagerUpdatedEventFilter = TypedEventFilter<ProtocolManagerUpdatedEvent>

export type RestakedEvent = TypedEvent<[BigNumber], { tokenID: BigNumber }>

export type RestakedEventFilter = TypedEventFilter<RestakedEvent>

export type SherDistributionManagerUpdatedEvent = TypedEvent<[string, string], { previous: string; current: string }>

export type SherDistributionManagerUpdatedEventFilter = TypedEventFilter<SherDistributionManagerUpdatedEvent>

export type StakingPeriodDisabledEvent = TypedEvent<[BigNumber], { period: BigNumber }>

export type StakingPeriodDisabledEventFilter = TypedEventFilter<StakingPeriodDisabledEvent>

export type StakingPeriodEnabledEvent = TypedEvent<[BigNumber], { period: BigNumber }>

export type StakingPeriodEnabledEventFilter = TypedEventFilter<StakingPeriodEnabledEvent>

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; tokenId: BigNumber }>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type UnpausedEvent = TypedEvent<[string], { account: string }>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export type YieldStrategyUpdateWithdrawAllErrorEvent = TypedEvent<[string], { error: string }>

export type YieldStrategyUpdateWithdrawAllErrorEventFilter = TypedEventFilter<YieldStrategyUpdateWithdrawAllErrorEvent>

export type YieldStrategyUpdatedEvent = TypedEvent<[string, string], { previous: string; current: string }>

export type YieldStrategyUpdatedEventFilter = TypedEventFilter<YieldStrategyUpdatedEvent>

export interface Sherlock extends BaseContract {
  contractName: "Sherlock"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SherlockInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    ARB_RESTAKE_GROWTH_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

    ARB_RESTAKE_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>

    ARB_RESTAKE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>

    ARB_RESTAKE_WAIT_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    arbRestake(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    disableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    enableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    initialStake(
      _amount: BigNumberish,
      _period: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>

    lockupEnd(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    name(overrides?: CallOverrides): Promise<[string]>

    nonStakersAddress(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    ownerRestake(
      _id: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    payoutClaim(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    redeemNFT(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeSherDistributionManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sher(overrides?: CallOverrides): Promise<[string]>

    sherDistributionManager(overrides?: CallOverrides): Promise<[string]>

    sherRewards(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    sherlockClaimManager(overrides?: CallOverrides): Promise<[string]>

    sherlockProtocolManager(overrides?: CallOverrides): Promise<[string]>

    stakingPeriods(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    token(overrides?: CallOverrides): Promise<[string]>

    tokenBalanceOf(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    tokenBalanceOfAddress(_staker: string, overrides?: CallOverrides): Promise<[BigNumber]>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    totalTokenBalanceStakers(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    updateNonStakersAddress(
      _nonStakers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateSherDistributionManager(
      _sherDistributionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateSherlockClaimManager(
      _claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateSherlockProtocolManager(
      _protocolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateYieldStrategy(
      _yieldStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    viewRewardForArbRestake(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { profit: BigNumber; able: boolean }>

    yieldStrategy(overrides?: CallOverrides): Promise<[string]>

    yieldStrategyDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    yieldStrategyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    yieldStrategyWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>
  }

  ARB_RESTAKE_GROWTH_TIME(overrides?: CallOverrides): Promise<BigNumber>

  ARB_RESTAKE_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>

  ARB_RESTAKE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

  ARB_RESTAKE_WAIT_TIME(overrides?: CallOverrides): Promise<BigNumber>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  arbRestake(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  disableStakingPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  enableStakingPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  initialStake(
    _amount: BigNumberish,
    _period: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

  lockupEnd(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  name(overrides?: CallOverrides): Promise<string>

  nonStakersAddress(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  ownerRestake(
    _id: BigNumberish,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  payoutClaim(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  redeemNFT(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeSherDistributionManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sher(overrides?: CallOverrides): Promise<string>

  sherDistributionManager(overrides?: CallOverrides): Promise<string>

  sherRewards(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  sherlockClaimManager(overrides?: CallOverrides): Promise<string>

  sherlockProtocolManager(overrides?: CallOverrides): Promise<string>

  stakingPeriods(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  token(overrides?: CallOverrides): Promise<string>

  tokenBalanceOf(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  tokenBalanceOfAddress(_staker: string, overrides?: CallOverrides): Promise<BigNumber>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  totalTokenBalanceStakers(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  updateNonStakersAddress(
    _nonStakers: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateSherDistributionManager(
    _sherDistributionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateSherlockClaimManager(
    _claimManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateSherlockProtocolManager(
    _protocolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateYieldStrategy(
    _yieldStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  viewRewardForArbRestake(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { profit: BigNumber; able: boolean }>

  yieldStrategy(overrides?: CallOverrides): Promise<string>

  yieldStrategyDeposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  yieldStrategyWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  yieldStrategyWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  callStatic: {
    ARB_RESTAKE_GROWTH_TIME(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_WAIT_TIME(overrides?: CallOverrides): Promise<BigNumber>

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    arbRestake(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _sher: BigNumber; _arbReward: BigNumber }>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    disableStakingPeriod(_period: BigNumberish, overrides?: CallOverrides): Promise<void>

    enableStakingPeriod(_period: BigNumberish, overrides?: CallOverrides): Promise<void>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    initialStake(
      _amount: BigNumberish,
      _period: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _id: BigNumber; _sher: BigNumber }>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

    lockupEnd(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    nonStakersAddress(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    ownerRestake(_id: BigNumberish, _period: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    payoutClaim(_receiver: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    redeemNFT(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    removeSherDistributionManager(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>

    sher(overrides?: CallOverrides): Promise<string>

    sherDistributionManager(overrides?: CallOverrides): Promise<string>

    sherRewards(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    sherlockClaimManager(overrides?: CallOverrides): Promise<string>

    sherlockProtocolManager(overrides?: CallOverrides): Promise<string>

    stakingPeriods(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    token(overrides?: CallOverrides): Promise<string>

    tokenBalanceOf(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenBalanceOfAddress(_staker: string, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    totalTokenBalanceStakers(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    updateNonStakersAddress(_nonStakers: string, overrides?: CallOverrides): Promise<void>

    updateSherDistributionManager(_sherDistributionManager: string, overrides?: CallOverrides): Promise<void>

    updateSherlockClaimManager(_claimManager: string, overrides?: CallOverrides): Promise<void>

    updateSherlockProtocolManager(_protocolManager: string, overrides?: CallOverrides): Promise<void>

    updateYieldStrategy(_yieldStrategy: string, overrides?: CallOverrides): Promise<void>

    viewRewardForArbRestake(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { profit: BigNumber; able: boolean }>

    yieldStrategy(overrides?: CallOverrides): Promise<string>

    yieldStrategyDeposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    yieldStrategyWithdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    yieldStrategyWithdrawAll(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter

    "ArbRestaked(uint256,uint256)"(tokenID?: BigNumberish | null, reward?: null): ArbRestakedEventFilter
    ArbRestaked(tokenID?: BigNumberish | null, reward?: null): ArbRestakedEventFilter

    "ClaimManagerUpdated(address,address)"(previous?: null, current?: null): ClaimManagerUpdatedEventFilter
    ClaimManagerUpdated(previous?: null, current?: null): ClaimManagerUpdatedEventFilter

    "ClaimPayout(address,uint256)"(receiver?: null, amount?: null): ClaimPayoutEventFilter
    ClaimPayout(receiver?: null, amount?: null): ClaimPayoutEventFilter

    "NonStakerAddressUpdated(address,address)"(previous?: null, current?: null): NonStakerAddressUpdatedEventFilter
    NonStakerAddressUpdated(previous?: null, current?: null): NonStakerAddressUpdatedEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    "Paused(address)"(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    "ProtocolManagerUpdated(address,address)"(previous?: null, current?: null): ProtocolManagerUpdatedEventFilter
    ProtocolManagerUpdated(previous?: null, current?: null): ProtocolManagerUpdatedEventFilter

    "Restaked(uint256)"(tokenID?: BigNumberish | null): RestakedEventFilter
    Restaked(tokenID?: BigNumberish | null): RestakedEventFilter

    "SherDistributionManagerUpdated(address,address)"(
      previous?: null,
      current?: null
    ): SherDistributionManagerUpdatedEventFilter
    SherDistributionManagerUpdated(previous?: null, current?: null): SherDistributionManagerUpdatedEventFilter

    "StakingPeriodDisabled(uint256)"(period?: null): StakingPeriodDisabledEventFilter
    StakingPeriodDisabled(period?: null): StakingPeriodDisabledEventFilter

    "StakingPeriodEnabled(uint256)"(period?: null): StakingPeriodEnabledEventFilter
    StakingPeriodEnabled(period?: null): StakingPeriodEnabledEventFilter

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter

    "Unpaused(address)"(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    "YieldStrategyUpdateWithdrawAllError(bytes)"(error?: null): YieldStrategyUpdateWithdrawAllErrorEventFilter
    YieldStrategyUpdateWithdrawAllError(error?: null): YieldStrategyUpdateWithdrawAllErrorEventFilter

    "YieldStrategyUpdated(address,address)"(previous?: null, current?: null): YieldStrategyUpdatedEventFilter
    YieldStrategyUpdated(previous?: null, current?: null): YieldStrategyUpdatedEventFilter
  }

  estimateGas: {
    ARB_RESTAKE_GROWTH_TIME(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    ARB_RESTAKE_WAIT_TIME(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    arbRestake(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    disableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    enableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    initialStake(
      _amount: BigNumberish,
      _period: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>

    lockupEnd(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    nonStakersAddress(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    ownerRestake(
      _id: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    payoutClaim(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    redeemNFT(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    removeSherDistributionManager(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sher(overrides?: CallOverrides): Promise<BigNumber>

    sherDistributionManager(overrides?: CallOverrides): Promise<BigNumber>

    sherRewards(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    sherlockClaimManager(overrides?: CallOverrides): Promise<BigNumber>

    sherlockProtocolManager(overrides?: CallOverrides): Promise<BigNumber>

    stakingPeriods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    tokenBalanceOf(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenBalanceOfAddress(_staker: string, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    totalTokenBalanceStakers(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    updateNonStakersAddress(
      _nonStakers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateSherDistributionManager(
      _sherDistributionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateSherlockClaimManager(
      _claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateSherlockProtocolManager(
      _protocolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateYieldStrategy(
      _yieldStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    viewRewardForArbRestake(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    yieldStrategy(overrides?: CallOverrides): Promise<BigNumber>

    yieldStrategyDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    yieldStrategyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    yieldStrategyWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    ARB_RESTAKE_GROWTH_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ARB_RESTAKE_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ARB_RESTAKE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ARB_RESTAKE_WAIT_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    arbRestake(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    disableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    enableStakingPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialStake(
      _amount: BigNumberish,
      _period: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    lockupEnd(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonStakersAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerRestake(
      _id: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payoutClaim(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    redeemNFT(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeSherDistributionManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sher(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherDistributionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherRewards(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherlockClaimManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sherlockProtocolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakingPeriods(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenBalanceOf(_tokenID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenBalanceOfAddress(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokenBalanceStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    updateNonStakersAddress(
      _nonStakers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateSherDistributionManager(
      _sherDistributionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateSherlockClaimManager(
      _claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateSherlockProtocolManager(
      _protocolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateYieldStrategy(
      _yieldStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    viewRewardForArbRestake(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    yieldStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    yieldStrategyDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    yieldStrategyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    yieldStrategyWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>
  }
}
