/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface SherClaimInterface extends utils.Interface {
  contractName: "SherClaim"
  functions: {
    "active()": FunctionFragment
    "add(address,uint256)": FunctionFragment
    "claim()": FunctionFragment
    "claimableAt()": FunctionFragment
    "sher()": FunctionFragment
    "userClaims(address)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "active", values?: undefined): string
  encodeFunctionData(functionFragment: "add", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "claim", values?: undefined): string
  encodeFunctionData(functionFragment: "claimableAt", values?: undefined): string
  encodeFunctionData(functionFragment: "sher", values?: undefined): string
  encodeFunctionData(functionFragment: "userClaims", values: [string]): string

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimableAt", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sher", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "userClaims", data: BytesLike): Result

  events: {
    "Add(address,address,uint256)": EventFragment
    "Claim(address,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment
}

export type AddEvent = TypedEvent<[string, string, BigNumber], { sender: string; account: string; amount: BigNumber }>

export type AddEventFilter = TypedEventFilter<AddEvent>

export type ClaimEvent = TypedEvent<[string, BigNumber], { account: string; amount: BigNumber }>

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>

export interface SherClaim extends BaseContract {
  contractName: "SherClaim"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SherClaimInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>

    add(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    claimableAt(overrides?: CallOverrides): Promise<[BigNumber]>

    sher(overrides?: CallOverrides): Promise<[string]>

    userClaims(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>
  }

  active(overrides?: CallOverrides): Promise<boolean>

  add(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  claimableAt(overrides?: CallOverrides): Promise<BigNumber>

  sher(overrides?: CallOverrides): Promise<string>

  userClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>

    add(_user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    claim(overrides?: CallOverrides): Promise<void>

    claimableAt(overrides?: CallOverrides): Promise<BigNumber>

    sher(overrides?: CallOverrides): Promise<string>

    userClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    "Add(address,address,uint256)"(sender?: string | null, account?: string | null, amount?: null): AddEventFilter
    Add(sender?: string | null, account?: string | null, amount?: null): AddEventFilter

    "Claim(address,uint256)"(account?: string | null, amount?: null): ClaimEventFilter
    Claim(account?: string | null, amount?: null): ClaimEventFilter
  }

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>

    add(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    claimableAt(overrides?: CallOverrides): Promise<BigNumber>

    sher(overrides?: CallOverrides): Promise<BigNumber>

    userClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>

    add(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    claimableAt(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sher(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userClaims(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
