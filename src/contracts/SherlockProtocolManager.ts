/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface SherlockProtocolManagerInterface extends utils.Interface {
  contractName: "SherlockProtocolManager"
  functions: {
    "MIN_BALANCE_SANITY_CEILING()": FunctionFragment
    "MIN_SECONDS_LEFT()": FunctionFragment
    "MIN_SECONDS_OF_COVERAGE()": FunctionFragment
    "PROTOCOL_CLAIM_DEADLINE()": FunctionFragment
    "activeBalance(bytes32)": FunctionFragment
    "claimPremiumsForStakers()": FunctionFragment
    "claimablePremiums()": FunctionFragment
    "coverageAmounts(bytes32)": FunctionFragment
    "depositToActiveBalance(bytes32,uint256)": FunctionFragment
    "forceRemoveByActiveBalance(bytes32)": FunctionFragment
    "forceRemoveBySecondsOfCoverage(bytes32)": FunctionFragment
    "isActive()": FunctionFragment
    "minActiveBalance()": FunctionFragment
    "nonStakersClaim(bytes32,uint256,address)": FunctionFragment
    "nonStakersClaimable(bytes32)": FunctionFragment
    "owner()": FunctionFragment
    "pause()": FunctionFragment
    "paused()": FunctionFragment
    "premium(bytes32)": FunctionFragment
    "protocolAdd(bytes32,address,bytes32,uint256,uint256)": FunctionFragment
    "protocolAgent(bytes32)": FunctionFragment
    "protocolRemove(bytes32)": FunctionFragment
    "protocolUpdate(bytes32,bytes32,uint256,uint256)": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "secondsOfCoverageLeft(bytes32)": FunctionFragment
    "setMinActiveBalance(uint256)": FunctionFragment
    "setProtocolPremium(bytes32,uint256)": FunctionFragment
    "setProtocolPremiums(bytes32[],uint256[])": FunctionFragment
    "setSherlockCoreAddress(address)": FunctionFragment
    "sweep(address,address[])": FunctionFragment
    "token()": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "transferProtocolAgent(bytes32,address)": FunctionFragment
    "unpause()": FunctionFragment
    "withdrawActiveBalance(bytes32,uint256)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "MIN_BALANCE_SANITY_CEILING", values?: undefined): string
  encodeFunctionData(functionFragment: "MIN_SECONDS_LEFT", values?: undefined): string
  encodeFunctionData(functionFragment: "MIN_SECONDS_OF_COVERAGE", values?: undefined): string
  encodeFunctionData(functionFragment: "PROTOCOL_CLAIM_DEADLINE", values?: undefined): string
  encodeFunctionData(functionFragment: "activeBalance", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "claimPremiumsForStakers", values?: undefined): string
  encodeFunctionData(functionFragment: "claimablePremiums", values?: undefined): string
  encodeFunctionData(functionFragment: "coverageAmounts", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "depositToActiveBalance", values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: "forceRemoveByActiveBalance", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "forceRemoveBySecondsOfCoverage", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string
  encodeFunctionData(functionFragment: "minActiveBalance", values?: undefined): string
  encodeFunctionData(functionFragment: "nonStakersClaim", values: [BytesLike, BigNumberish, string]): string
  encodeFunctionData(functionFragment: "nonStakersClaimable", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "pause", values?: undefined): string
  encodeFunctionData(functionFragment: "paused", values?: undefined): string
  encodeFunctionData(functionFragment: "premium", values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: "protocolAdd",
    values: [BytesLike, string, BytesLike, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "protocolAgent", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "protocolRemove", values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: "protocolUpdate",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "secondsOfCoverageLeft", values: [BytesLike]): string
  encodeFunctionData(functionFragment: "setMinActiveBalance", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "setProtocolPremium", values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: "setProtocolPremiums", values: [BytesLike[], BigNumberish[]]): string
  encodeFunctionData(functionFragment: "setSherlockCoreAddress", values: [string]): string
  encodeFunctionData(functionFragment: "sweep", values: [string, string[]]): string
  encodeFunctionData(functionFragment: "token", values?: undefined): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "transferProtocolAgent", values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string
  encodeFunctionData(functionFragment: "withdrawActiveBalance", values: [BytesLike, BigNumberish]): string

  decodeFunctionResult(functionFragment: "MIN_BALANCE_SANITY_CEILING", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "MIN_SECONDS_LEFT", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "MIN_SECONDS_OF_COVERAGE", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "PROTOCOL_CLAIM_DEADLINE", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "activeBalance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimPremiumsForStakers", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimablePremiums", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "coverageAmounts", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "depositToActiveBalance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "forceRemoveByActiveBalance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "forceRemoveBySecondsOfCoverage", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "minActiveBalance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nonStakersClaim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nonStakersClaimable", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "protocolAdd", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "protocolAgent", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "protocolRemove", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "protocolUpdate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "secondsOfCoverageLeft", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setMinActiveBalance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setProtocolPremium", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setProtocolPremiums", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setSherlockCoreAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferProtocolAgent", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawActiveBalance", data: BytesLike): Result

  events: {
    "AccountingError(bytes32,uint256,uint256)": EventFragment
    "MinBalance(uint256,uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "Paused(address)": EventFragment
    "ProtocolAdded(bytes32)": EventFragment
    "ProtocolAgentTransfer(bytes32,address,address)": EventFragment
    "ProtocolBalanceDeposited(bytes32,uint256)": EventFragment
    "ProtocolBalanceWithdrawn(bytes32,uint256)": EventFragment
    "ProtocolPremiumChanged(bytes32,uint256,uint256)": EventFragment
    "ProtocolRemoved(bytes32)": EventFragment
    "ProtocolRemovedByArb(bytes32,address,uint256)": EventFragment
    "ProtocolUpdated(bytes32,bytes32,uint256,uint256)": EventFragment
    "SherlockCoreSet(address)": EventFragment
    "Unpaused(address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "AccountingError"): EventFragment
  getEvent(nameOrSignatureOrTopic: "MinBalance"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolAdded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolAgentTransfer"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolBalanceDeposited"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolBalanceWithdrawn"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolPremiumChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolRemoved"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolRemovedByArb"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ProtocolUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "SherlockCoreSet"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment
}

export type AccountingErrorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { protocol: string; amount: BigNumber; insufficientTokens: BigNumber }
>

export type AccountingErrorEventFilter = TypedEventFilter<AccountingErrorEvent>

export type MinBalanceEvent = TypedEvent<[BigNumber, BigNumber], { previous: BigNumber; current: BigNumber }>

export type MinBalanceEventFilter = TypedEventFilter<MinBalanceEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type PausedEvent = TypedEvent<[string], { account: string }>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type ProtocolAddedEvent = TypedEvent<[string], { protocol: string }>

export type ProtocolAddedEventFilter = TypedEventFilter<ProtocolAddedEvent>

export type ProtocolAgentTransferEvent = TypedEvent<
  [string, string, string],
  { protocol: string; from: string; to: string }
>

export type ProtocolAgentTransferEventFilter = TypedEventFilter<ProtocolAgentTransferEvent>

export type ProtocolBalanceDepositedEvent = TypedEvent<[string, BigNumber], { protocol: string; amount: BigNumber }>

export type ProtocolBalanceDepositedEventFilter = TypedEventFilter<ProtocolBalanceDepositedEvent>

export type ProtocolBalanceWithdrawnEvent = TypedEvent<[string, BigNumber], { protocol: string; amount: BigNumber }>

export type ProtocolBalanceWithdrawnEventFilter = TypedEventFilter<ProtocolBalanceWithdrawnEvent>

export type ProtocolPremiumChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { protocol: string; oldPremium: BigNumber; newPremium: BigNumber }
>

export type ProtocolPremiumChangedEventFilter = TypedEventFilter<ProtocolPremiumChangedEvent>

export type ProtocolRemovedEvent = TypedEvent<[string], { protocol: string }>

export type ProtocolRemovedEventFilter = TypedEventFilter<ProtocolRemovedEvent>

export type ProtocolRemovedByArbEvent = TypedEvent<
  [string, string, BigNumber],
  { protocol: string; arb: string; profit: BigNumber }
>

export type ProtocolRemovedByArbEventFilter = TypedEventFilter<ProtocolRemovedByArbEvent>

export type ProtocolUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    protocol: string
    coverage: string
    nonStakers: BigNumber
    coverageAmount: BigNumber
  }
>

export type ProtocolUpdatedEventFilter = TypedEventFilter<ProtocolUpdatedEvent>

export type SherlockCoreSetEvent = TypedEvent<[string], { sherlock: string }>

export type SherlockCoreSetEventFilter = TypedEventFilter<SherlockCoreSetEvent>

export type UnpausedEvent = TypedEvent<[string], { account: string }>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface SherlockProtocolManager extends BaseContract {
  contractName: "SherlockProtocolManager"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SherlockProtocolManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    MIN_BALANCE_SANITY_CEILING(overrides?: CallOverrides): Promise<[BigNumber]>

    MIN_SECONDS_LEFT(overrides?: CallOverrides): Promise<[BigNumber]>

    MIN_SECONDS_OF_COVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>

    PROTOCOL_CLAIM_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>

    activeBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    claimPremiumsForStakers(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    claimablePremiums(overrides?: CallOverrides): Promise<[BigNumber]>

    coverageAmounts(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { current: BigNumber; previous: BigNumber }>

    depositToActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    forceRemoveByActiveBalance(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    forceRemoveBySecondsOfCoverage(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isActive(overrides?: CallOverrides): Promise<[boolean]>

    minActiveBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    nonStakersClaim(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nonStakersClaimable(_protocol: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    premium(_protocol: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    protocolAdd(
      _protocol: BytesLike,
      _protocolAgent: string,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    protocolAgent(_protocol: BytesLike, overrides?: CallOverrides): Promise<[string]>

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    protocolUpdate(
      _protocol: BytesLike,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    secondsOfCoverageLeft(_protocol: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    setMinActiveBalance(
      _minActiveBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setProtocolPremium(
      _protocol: BytesLike,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setProtocolPremiums(
      _protocol: BytesLike[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferProtocolAgent(
      _protocol: BytesLike,
      _protocolAgent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    withdrawActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  MIN_BALANCE_SANITY_CEILING(overrides?: CallOverrides): Promise<BigNumber>

  MIN_SECONDS_LEFT(overrides?: CallOverrides): Promise<BigNumber>

  MIN_SECONDS_OF_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>

  PROTOCOL_CLAIM_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

  activeBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  claimPremiumsForStakers(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  claimablePremiums(overrides?: CallOverrides): Promise<BigNumber>

  coverageAmounts(
    _protocol: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { current: BigNumber; previous: BigNumber }>

  depositToActiveBalance(
    _protocol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  forceRemoveByActiveBalance(
    _protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  forceRemoveBySecondsOfCoverage(
    _protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isActive(overrides?: CallOverrides): Promise<boolean>

  minActiveBalance(overrides?: CallOverrides): Promise<BigNumber>

  nonStakersClaim(
    _protocol: BytesLike,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nonStakersClaimable(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  premium(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  protocolAdd(
    _protocol: BytesLike,
    _protocolAgent: string,
    _coverage: BytesLike,
    _nonStakers: BigNumberish,
    _coverageAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  protocolAgent(_protocol: BytesLike, overrides?: CallOverrides): Promise<string>

  protocolRemove(
    _protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  protocolUpdate(
    _protocol: BytesLike,
    _coverage: BytesLike,
    _nonStakers: BigNumberish,
    _coverageAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  secondsOfCoverageLeft(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  setMinActiveBalance(
    _minActiveBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setProtocolPremium(
    _protocol: BytesLike,
    _premium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setProtocolPremiums(
    _protocol: BytesLike[],
    _premium: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSherlockCoreAddress(
    _sherlock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sweep(
    _receiver: string,
    _extraTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferProtocolAgent(
    _protocol: BytesLike,
    _protocolAgent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  withdrawActiveBalance(
    _protocol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    MIN_BALANCE_SANITY_CEILING(overrides?: CallOverrides): Promise<BigNumber>

    MIN_SECONDS_LEFT(overrides?: CallOverrides): Promise<BigNumber>

    MIN_SECONDS_OF_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>

    PROTOCOL_CLAIM_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

    activeBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    claimPremiumsForStakers(overrides?: CallOverrides): Promise<void>

    claimablePremiums(overrides?: CallOverrides): Promise<BigNumber>

    coverageAmounts(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { current: BigNumber; previous: BigNumber }>

    depositToActiveBalance(_protocol: BytesLike, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    forceRemoveByActiveBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<void>

    forceRemoveBySecondsOfCoverage(_protocol: BytesLike, overrides?: CallOverrides): Promise<void>

    isActive(overrides?: CallOverrides): Promise<boolean>

    minActiveBalance(overrides?: CallOverrides): Promise<BigNumber>

    nonStakersClaim(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>

    nonStakersClaimable(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    premium(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    protocolAdd(
      _protocol: BytesLike,
      _protocolAgent: string,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    protocolAgent(_protocol: BytesLike, overrides?: CallOverrides): Promise<string>

    protocolRemove(_protocol: BytesLike, overrides?: CallOverrides): Promise<void>

    protocolUpdate(
      _protocol: BytesLike,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    secondsOfCoverageLeft(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    setMinActiveBalance(_minActiveBalance: BigNumberish, overrides?: CallOverrides): Promise<void>

    setProtocolPremium(_protocol: BytesLike, _premium: BigNumberish, overrides?: CallOverrides): Promise<void>

    setProtocolPremiums(_protocol: BytesLike[], _premium: BigNumberish[], overrides?: CallOverrides): Promise<void>

    setSherlockCoreAddress(_sherlock: string, overrides?: CallOverrides): Promise<void>

    sweep(_receiver: string, _extraTokens: string[], overrides?: CallOverrides): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    transferProtocolAgent(_protocol: BytesLike, _protocolAgent: string, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    withdrawActiveBalance(_protocol: BytesLike, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "AccountingError(bytes32,uint256,uint256)"(
      protocol?: BytesLike | null,
      amount?: null,
      insufficientTokens?: null
    ): AccountingErrorEventFilter
    AccountingError(protocol?: BytesLike | null, amount?: null, insufficientTokens?: null): AccountingErrorEventFilter

    "MinBalance(uint256,uint256)"(previous?: null, current?: null): MinBalanceEventFilter
    MinBalance(previous?: null, current?: null): MinBalanceEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    "Paused(address)"(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    "ProtocolAdded(bytes32)"(protocol?: BytesLike | null): ProtocolAddedEventFilter
    ProtocolAdded(protocol?: BytesLike | null): ProtocolAddedEventFilter

    "ProtocolAgentTransfer(bytes32,address,address)"(
      protocol?: BytesLike | null,
      from?: null,
      to?: null
    ): ProtocolAgentTransferEventFilter
    ProtocolAgentTransfer(protocol?: BytesLike | null, from?: null, to?: null): ProtocolAgentTransferEventFilter

    "ProtocolBalanceDeposited(bytes32,uint256)"(
      protocol?: BytesLike | null,
      amount?: null
    ): ProtocolBalanceDepositedEventFilter
    ProtocolBalanceDeposited(protocol?: BytesLike | null, amount?: null): ProtocolBalanceDepositedEventFilter

    "ProtocolBalanceWithdrawn(bytes32,uint256)"(
      protocol?: BytesLike | null,
      amount?: null
    ): ProtocolBalanceWithdrawnEventFilter
    ProtocolBalanceWithdrawn(protocol?: BytesLike | null, amount?: null): ProtocolBalanceWithdrawnEventFilter

    "ProtocolPremiumChanged(bytes32,uint256,uint256)"(
      protocol?: BytesLike | null,
      oldPremium?: null,
      newPremium?: null
    ): ProtocolPremiumChangedEventFilter
    ProtocolPremiumChanged(
      protocol?: BytesLike | null,
      oldPremium?: null,
      newPremium?: null
    ): ProtocolPremiumChangedEventFilter

    "ProtocolRemoved(bytes32)"(protocol?: BytesLike | null): ProtocolRemovedEventFilter
    ProtocolRemoved(protocol?: BytesLike | null): ProtocolRemovedEventFilter

    "ProtocolRemovedByArb(bytes32,address,uint256)"(
      protocol?: BytesLike | null,
      arb?: null,
      profit?: null
    ): ProtocolRemovedByArbEventFilter
    ProtocolRemovedByArb(protocol?: BytesLike | null, arb?: null, profit?: null): ProtocolRemovedByArbEventFilter

    "ProtocolUpdated(bytes32,bytes32,uint256,uint256)"(
      protocol?: BytesLike | null,
      coverage?: null,
      nonStakers?: null,
      coverageAmount?: null
    ): ProtocolUpdatedEventFilter
    ProtocolUpdated(
      protocol?: BytesLike | null,
      coverage?: null,
      nonStakers?: null,
      coverageAmount?: null
    ): ProtocolUpdatedEventFilter

    "SherlockCoreSet(address)"(sherlock?: null): SherlockCoreSetEventFilter
    SherlockCoreSet(sherlock?: null): SherlockCoreSetEventFilter

    "Unpaused(address)"(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    MIN_BALANCE_SANITY_CEILING(overrides?: CallOverrides): Promise<BigNumber>

    MIN_SECONDS_LEFT(overrides?: CallOverrides): Promise<BigNumber>

    MIN_SECONDS_OF_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>

    PROTOCOL_CLAIM_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

    activeBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    claimPremiumsForStakers(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    claimablePremiums(overrides?: CallOverrides): Promise<BigNumber>

    coverageAmounts(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    depositToActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    forceRemoveByActiveBalance(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    forceRemoveBySecondsOfCoverage(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isActive(overrides?: CallOverrides): Promise<BigNumber>

    minActiveBalance(overrides?: CallOverrides): Promise<BigNumber>

    nonStakersClaim(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nonStakersClaimable(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    premium(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    protocolAdd(
      _protocol: BytesLike,
      _protocolAgent: string,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    protocolAgent(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    protocolUpdate(
      _protocol: BytesLike,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    secondsOfCoverageLeft(_protocol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    setMinActiveBalance(
      _minActiveBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setProtocolPremium(
      _protocol: BytesLike,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setProtocolPremiums(
      _protocol: BytesLike[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    transferProtocolAgent(
      _protocol: BytesLike,
      _protocolAgent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    withdrawActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MIN_BALANCE_SANITY_CEILING(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MIN_SECONDS_LEFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MIN_SECONDS_OF_COVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PROTOCOL_CLAIM_DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    activeBalance(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimPremiumsForStakers(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    claimablePremiums(overrides?: CallOverrides): Promise<PopulatedTransaction>

    coverageAmounts(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    depositToActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    forceRemoveByActiveBalance(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    forceRemoveBySecondsOfCoverage(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minActiveBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonStakersClaim(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nonStakersClaimable(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    premium(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    protocolAdd(
      _protocol: BytesLike,
      _protocolAgent: string,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    protocolAgent(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    protocolUpdate(
      _protocol: BytesLike,
      _coverage: BytesLike,
      _nonStakers: BigNumberish,
      _coverageAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    secondsOfCoverageLeft(_protocol: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    setMinActiveBalance(
      _minActiveBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setProtocolPremium(
      _protocol: BytesLike,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setProtocolPremiums(
      _protocol: BytesLike[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSherlockCoreAddress(
      _sherlock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sweep(
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferProtocolAgent(
      _protocol: BytesLike,
      _protocolAgent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    withdrawActiveBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
